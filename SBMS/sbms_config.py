#####################################################################
# This file is used to generate the jana_config.h file that contains
# configuration information needed when compiling certain source files.
# Some files have sections that are or are not compiled based on the
# value of a preprocessor directive. Historically, the jana_config.h
# file was produced by the configure script. It lived in the src/JANA
# directory while compilation took place and was copied ot the install
# directory by "make" during the install phase. This prevented multiple
# platforms from compiling simultaneously (assuming their configurations
# were different).
#
# This system will re-generate the jana_config.h file each time scons
# is run and place it in the platform-specific build directory tree
# to allow simultaneously builds.
# It is called from the bottom of the top-level SConstruct file
#
# Dec. 10, 2013  DL
#####################################################################
import os, sys
import subprocess
import datetime
from stat import *


##################################
# mk_setenv
##################################
def mk_jana_config(env):
	ofdirname = '#src/.%s/JANA' % env['OSNAME']
	ofdir = '%s' % env.Dir(ofdirname)
	ofname = '%s/jana_config.h' % ofdir
	print 'sbms : Making jana_config.h in %s' % ofdir
	
	# ROOT
	HAVE_ROOT = 0
	if(os.getenv('ROOTSYS','no') != 'no'): HAVE_ROOT = 1
	
	# XERCES
	HAVE_XERCES = 0
	XERCES3 = 0
	XERCESCROOT = os.getenv('XERCESCROOT','no')
	if(XERCESCROOT != 'no'):
		HAVE_XERCES = 1
		xerces3file = '%s/include/xercesc/dom/DOMImplementationList.hpp' % XERCESCROOT
		if(os.path.isfile(xerces3file)): XERCES3 = 1

	# CCDB
	HAVE_CCDB = 0
	if(os.getenv('CCDB_HOME','no') != 'no'): HAVE_CCDB = 1
		
	str = ''
	
	# Header
	str += '//\n'
	str += '// This file was generated by the SBMS system (see SBMS/sbms_config.py)\n'
	str += '//\n'
	str += '// Generation date: %s\n' % datetime.datetime.now().strftime("%I:%M%p on %B %d, %Y")
	str += '//\n'
	str += '//       User: %s\n' % os.getenv('USER', 'Unknown')
	str += '//       Host: %s\n' % os.getenv('HOST', 'Unknown')
	str += '//   platform: %s' % subprocess.Popen(["uname", "-a"], stdout=subprocess.PIPE).communicate()[0]
	str += '// BMS_OSNAME: %s\n' % env['OSNAME']
	str += '\n'
	str += '\n'

	str += '#define HAVE_ROOT     %d\n' % HAVE_ROOT
	str += '#define HAVE_XERCES   %d\n' % HAVE_XERCES
	str += '#define XERCES3       %d\n' % XERCES3
	str += '#define HAVE_CCDB     %d\n' % HAVE_CCDB

	str += '\n'
	str += '\n'

	# Make sure output directory eists
	try:
		os.makedirs(ofdir)
	except OSError:
		pass

	# Write to file
	f = open(ofname, 'w')
	f.write(str)
	f.close()
	os.chmod(ofname, S_IRUSR + S_IWUSR + S_IRGRP + S_IWGRP + S_IROTH )
	
